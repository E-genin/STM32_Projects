
PLL_Configuration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000238  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e4  080003ec  000103ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e4  080003e4  000103ec  2**0
                  CONTENTS
  4 .ARM          00000000  080003e4  080003e4  000103ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e4  080003ec  000103ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e4  080003e4  000103e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003e8  080003e8  000103e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103ec  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000103ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010416  2**0
                  CONTENTS, READONLY
 14 .debug_info   000001c3  00000000  00000000  00010459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000101  00000000  00000000  0001061c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000078  00000000  00000000  00010720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000004c  00000000  00000000  00010798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001cb2  00000000  00000000  000107e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000aa9  00000000  00000000  00012496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000076fe  00000000  00000000  00012f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000c8  00000000  00000000  0001a640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0001a708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003cc 	.word	0x080003cc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003cc 	.word	0x080003cc

080001ec <Write_Values_In_Register>:
#include "Init.h"
#include "compiler.h"


void Write_Values_In_Register(uint32_t Address, uint32_t Start_Position, uint32_t Length, uint32_t Value)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b087      	sub	sp, #28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	60f8      	str	r0, [r7, #12]
 80001f4:	60b9      	str	r1, [r7, #8]
 80001f6:	607a      	str	r2, [r7, #4]
 80001f8:	603b      	str	r3, [r7, #0]
    uint32_t Mask = ~(((1U << Length)-1)<< Start_Position);
 80001fa:	2201      	movs	r2, #1
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000202:	1e5a      	subs	r2, r3, #1
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	fa02 f303 	lsl.w	r3, r2, r3
 800020a:	43db      	mvns	r3, r3
 800020c:	617b      	str	r3, [r7, #20]

    REG_ACCESS(Address) &= (Mask);
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	6819      	ldr	r1, [r3, #0]
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	697a      	ldr	r2, [r7, #20]
 8000216:	400a      	ands	r2, r1
 8000218:	601a      	str	r2, [r3, #0]
    REG_ACCESS(Address) |= (Value << Start_Position);
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	6819      	ldr	r1, [r3, #0]
 800021e:	683a      	ldr	r2, [r7, #0]
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	409a      	lsls	r2, r3
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	430a      	orrs	r2, r1
 8000228:	601a      	str	r2, [r3, #0]

}
 800022a:	bf00      	nop
 800022c:	371c      	adds	r7, #28
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <McuInit>:

void McuInit()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	// PLL  = HSE / M * N / P
	// PLL' = HSE / M * N / Q
	// M = 8, N = 192, P = 8, Q = 4

    // Enabling HSE
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_CR_OFFSET),16,1,1);
 8000238:	2301      	movs	r3, #1
 800023a:	2201      	movs	r2, #1
 800023c:	2110      	movs	r1, #16
 800023e:	4824      	ldr	r0, [pc, #144]	; (80002d0 <McuInit+0x9c>)
 8000240:	f7ff ffd4 	bl	80001ec <Write_Values_In_Register>

    // Waiting for the HSE to be ready
    while(((REG_ACCESS((RCC_REGISTER_BASE_ADDRESS+MY_RCC_CR_OFFSET))) & (1U<<17))==0);
 8000244:	bf00      	nop
 8000246:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <McuInit+0x9c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800024e:	2b00      	cmp	r3, #0
 8000250:	d0f9      	beq.n	8000246 <McuInit+0x12>

    // Set M Divider for PLL = 8
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_PLLCFGR_OFFSET),0,6,8);
 8000252:	2308      	movs	r3, #8
 8000254:	2206      	movs	r2, #6
 8000256:	2100      	movs	r1, #0
 8000258:	481e      	ldr	r0, [pc, #120]	; (80002d4 <McuInit+0xa0>)
 800025a:	f7ff ffc7 	bl	80001ec <Write_Values_In_Register>

    // Set N Multiplier for PLL = 192
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_PLLCFGR_OFFSET),6,9,192);
 800025e:	23c0      	movs	r3, #192	; 0xc0
 8000260:	2209      	movs	r2, #9
 8000262:	2106      	movs	r1, #6
 8000264:	481b      	ldr	r0, [pc, #108]	; (80002d4 <McuInit+0xa0>)
 8000266:	f7ff ffc1 	bl	80001ec <Write_Values_In_Register>


    // Set P Divider for PLL = 8
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_PLLCFGR_OFFSET),16,2,3);
 800026a:	2303      	movs	r3, #3
 800026c:	2202      	movs	r2, #2
 800026e:	2110      	movs	r1, #16
 8000270:	4818      	ldr	r0, [pc, #96]	; (80002d4 <McuInit+0xa0>)
 8000272:	f7ff ffbb 	bl	80001ec <Write_Values_In_Register>

    // Set Q Divider for PLL = 4
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_PLLCFGR_OFFSET),24,4,4);
 8000276:	2304      	movs	r3, #4
 8000278:	2204      	movs	r2, #4
 800027a:	2118      	movs	r1, #24
 800027c:	4815      	ldr	r0, [pc, #84]	; (80002d4 <McuInit+0xa0>)
 800027e:	f7ff ffb5 	bl	80001ec <Write_Values_In_Register>

    // Set HSE as PLL Source
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_PLLCFGR_OFFSET),22,1,1);
 8000282:	2301      	movs	r3, #1
 8000284:	2201      	movs	r2, #1
 8000286:	2116      	movs	r1, #22
 8000288:	4812      	ldr	r0, [pc, #72]	; (80002d4 <McuInit+0xa0>)
 800028a:	f7ff ffaf 	bl	80001ec <Write_Values_In_Register>

    // Set APB1 Prescaler = 4
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_CFGR_OFFSET),10,3,5);
 800028e:	2305      	movs	r3, #5
 8000290:	2203      	movs	r2, #3
 8000292:	210a      	movs	r1, #10
 8000294:	4810      	ldr	r0, [pc, #64]	; (80002d8 <McuInit+0xa4>)
 8000296:	f7ff ffa9 	bl	80001ec <Write_Values_In_Register>

    // Set APB2 Prescaler = 2
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_CFGR_OFFSET),13,3,4);
 800029a:	2304      	movs	r3, #4
 800029c:	2203      	movs	r2, #3
 800029e:	210d      	movs	r1, #13
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <McuInit+0xa4>)
 80002a2:	f7ff ffa3 	bl	80001ec <Write_Values_In_Register>

    // Enable PLL
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_CR_OFFSET),24,1,1);
 80002a6:	2301      	movs	r3, #1
 80002a8:	2201      	movs	r2, #1
 80002aa:	2118      	movs	r1, #24
 80002ac:	4808      	ldr	r0, [pc, #32]	; (80002d0 <McuInit+0x9c>)
 80002ae:	f7ff ff9d 	bl	80001ec <Write_Values_In_Register>

    // Waiting for the PLL to be ready
    while(((REG_ACCESS((RCC_REGISTER_BASE_ADDRESS+MY_RCC_CR_OFFSET))) & (1U<<25))==0);
 80002b2:	bf00      	nop
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <McuInit+0x9c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d0f9      	beq.n	80002b4 <McuInit+0x80>

    // SWitch to PLL
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_CFGR_OFFSET),0,2,2);
 80002c0:	2302      	movs	r3, #2
 80002c2:	2202      	movs	r2, #2
 80002c4:	2100      	movs	r1, #0
 80002c6:	4804      	ldr	r0, [pc, #16]	; (80002d8 <McuInit+0xa4>)
 80002c8:	f7ff ff90 	bl	80001ec <Write_Values_In_Register>



    return ; // for debugging
 80002cc:	bf00      	nop
}
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40023804 	.word	0x40023804
 80002d8:	40023808 	.word	0x40023808

080002dc <Mco1Init>:

void Mco1Init()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
    // Configuring MCO1 to take PLL as a source
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_CFGR_OFFSET),21,2,3);
 80002e0:	2303      	movs	r3, #3
 80002e2:	2202      	movs	r2, #2
 80002e4:	2115      	movs	r1, #21
 80002e6:	480b      	ldr	r0, [pc, #44]	; (8000314 <Mco1Init+0x38>)
 80002e8:	f7ff ff80 	bl	80001ec <Write_Values_In_Register>

    // Configuring Prescaler for MCO1 = 5
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_CFGR_OFFSET),24,3,7);
 80002ec:	2307      	movs	r3, #7
 80002ee:	2203      	movs	r2, #3
 80002f0:	2118      	movs	r1, #24
 80002f2:	4808      	ldr	r0, [pc, #32]	; (8000314 <Mco1Init+0x38>)
 80002f4:	f7ff ff7a 	bl	80001ec <Write_Values_In_Register>

    // Enabling RCC for GPIOA
    Write_Values_In_Register((RCC_REGISTER_BASE_ADDRESS+MY_RCC_AHB1ENR_OFFSET),0,1,1);
 80002f8:	2301      	movs	r3, #1
 80002fa:	2201      	movs	r2, #1
 80002fc:	2100      	movs	r1, #0
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <Mco1Init+0x3c>)
 8000300:	f7ff ff74 	bl	80001ec <Write_Values_In_Register>

    // Configuring PA8 for Alternate Function
    Write_Values_In_Register((GPIO_BASE_ADDRESS+MY_GPIOx_MODER_OFFSET),16,2,2);
 8000304:	2302      	movs	r3, #2
 8000306:	2202      	movs	r2, #2
 8000308:	2110      	movs	r1, #16
 800030a:	4804      	ldr	r0, [pc, #16]	; (800031c <Mco1Init+0x40>)
 800030c:	f7ff ff6e 	bl	80001ec <Write_Values_In_Register>

    return ; // for debugging
 8000310:	bf00      	nop
}
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40023808 	.word	0x40023808
 8000318:	40023830 	.word	0x40023830
 800031c:	40020000 	.word	0x40020000

08000320 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

	McuInit();	// Configuring the PLL to be used as a sourcing clock (24 MHz)
 8000324:	f7ff ff86 	bl	8000234 <McuInit>

	Mco1Init(); // Configuring MCO1 (PA8) to output the clock provided from PLL (24 Mhz/5 = 4.8 Mhz)
 8000328:	f7ff ffd8 	bl	80002dc <Mco1Init>

	for(;;);
 800032c:	e7fe      	b.n	800032c <main+0xc>
	...

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	; (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	; (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	; (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	; (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 f811 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ffdd 	bl	8000320 <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000374:	080003ec 	.word	0x080003ec
  ldr r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800037c:	2000001c 	.word	0x2000001c

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4d0d      	ldr	r5, [pc, #52]	; (80003bc <__libc_init_array+0x38>)
 8000388:	4c0d      	ldr	r4, [pc, #52]	; (80003c0 <__libc_init_array+0x3c>)
 800038a:	1b64      	subs	r4, r4, r5
 800038c:	10a4      	asrs	r4, r4, #2
 800038e:	2600      	movs	r6, #0
 8000390:	42a6      	cmp	r6, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	4d0b      	ldr	r5, [pc, #44]	; (80003c4 <__libc_init_array+0x40>)
 8000396:	4c0c      	ldr	r4, [pc, #48]	; (80003c8 <__libc_init_array+0x44>)
 8000398:	f000 f818 	bl	80003cc <_init>
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	2600      	movs	r6, #0
 80003a2:	42a6      	cmp	r6, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ac:	4798      	blx	r3
 80003ae:	3601      	adds	r6, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b6:	4798      	blx	r3
 80003b8:	3601      	adds	r6, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e4 	.word	0x080003e4
 80003c4:	080003e4 	.word	0x080003e4
 80003c8:	080003e8 	.word	0x080003e8

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
